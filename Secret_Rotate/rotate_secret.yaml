Parameters:
  ResourcePrefix:
    Description: Prefix for all resources
    Type: String
    Default: MyResource

Resources:

  MySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${ResourcePrefix}RotatingSecret'
      Description: 'My Secret that will be rotated every hour'
      GenerateSecretString:
        SecretStringTemplate: '{"password": "initialpassword"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"/\@ '

  RotateSecretFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          SECRET_NAME: !Sub '${ResourcePrefix}RotatingSecret'
      Handler: "index.handler"
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: "python3.9"
      Code:
        ZipFile: |
          import boto3
          import random
          import string
          import os

          def handler(event, context):
              client = boto3.client('secretsmanager')
              new_password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(16))
              secret_name = os.environ['SECRET_NAME']
              client.put_secret_value(SecretId=secret_name, SecretString='{"password": "' + new_password + '"}')

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub '${ResourcePrefix}SecretsManagerAccess'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:PutSecretValue"
                Resource: !Ref MySecret

  EveryHourEvent:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      Targets:
        - Arn: !GetAtt RotateSecretFunction.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RotateSecretFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EveryHourEvent.Arn
